// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleProject.Models;

namespace VehicleProject.Migrations
{
    [DbContext(typeof(VehicleProjectContext))]
    [Migration("20210428100817_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VehicleProject.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            FirstName = "Max",
                            LastName = "M"
                        },
                        new
                        {
                            EmployeeId = 2,
                            FirstName = "Sarah",
                            LastName = "Suzie"
                        },
                        new
                        {
                            EmployeeId = 3,
                            FirstName = "Nana",
                            LastName = "Crinkle"
                        },
                        new
                        {
                            EmployeeId = 4,
                            FirstName = "Jill",
                            LastName = "Abert"
                        },
                        new
                        {
                            EmployeeId = 5,
                            FirstName = "James",
                            LastName = "North"
                        },
                        new
                        {
                            EmployeeId = 6,
                            FirstName = "Emily",
                            LastName = "Beate"
                        },
                        new
                        {
                            EmployeeId = 7,
                            FirstName = "Tric",
                            LastName = "C."
                        },
                        new
                        {
                            EmployeeId = 8,
                            FirstName = "Sam",
                            LastName = "Coates"
                        },
                        new
                        {
                            EmployeeId = 9,
                            FirstName = "Frank",
                            LastName = "Diamond"
                        },
                        new
                        {
                            EmployeeId = 10,
                            FirstName = "Lilly",
                            LastName = "Grant"
                        },
                        new
                        {
                            EmployeeId = 11,
                            FirstName = "Calt",
                            LastName = "Shrew"
                        },
                        new
                        {
                            EmployeeId = 12,
                            FirstName = "Tyler",
                            LastName = "Sartar"
                        },
                        new
                        {
                            EmployeeId = 13,
                            FirstName = "Roxane",
                            LastName = "Looke"
                        },
                        new
                        {
                            EmployeeId = 14,
                            FirstName = "Demetrius",
                            LastName = "Hand"
                        },
                        new
                        {
                            EmployeeId = 15,
                            FirstName = "Frank",
                            LastName = "Herbert"
                        },
                        new
                        {
                            EmployeeId = 16,
                            FirstName = "Locke",
                            LastName = "Howd"
                        },
                        new
                        {
                            EmployeeId = 17,
                            FirstName = "Canwo",
                            LastName = "Loowart"
                        },
                        new
                        {
                            EmployeeId = 18,
                            FirstName = "Greg",
                            LastName = "A."
                        },
                        new
                        {
                            EmployeeId = 19,
                            FirstName = "Jackie",
                            LastName = "Morrison"
                        },
                        new
                        {
                            EmployeeId = 20,
                            FirstName = "Jimmy",
                            LastName = "S"
                        },
                        new
                        {
                            EmployeeId = 21,
                            FirstName = "Mary",
                            LastName = "W"
                        },
                        new
                        {
                            EmployeeId = 22,
                            FirstName = "Max",
                            LastName = "Tacke"
                        },
                        new
                        {
                            EmployeeId = 23,
                            FirstName = "B",
                            LastName = "Awworwo"
                        },
                        new
                        {
                            EmployeeId = 25,
                            FirstName = "Steve",
                            LastName = "Eitter"
                        },
                        new
                        {
                            EmployeeId = 26,
                            FirstName = "Sampson",
                            LastName = "Allk"
                        });
                });

            modelBuilder.Entity("VehicleProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VehicleProject.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("VehicleTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("VehicleId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            Price = 18.0,
                            Title = "F-150",
                            VehicleTypeId = "truck"
                        },
                        new
                        {
                            VehicleId = 2,
                            Price = 5.5,
                            Title = "Cruiser",
                            VehicleTypeId = "semi"
                        },
                        new
                        {
                            VehicleId = 3,
                            Price = 4.5,
                            Title = "F-150X",
                            VehicleTypeId = "truck"
                        },
                        new
                        {
                            VehicleId = 4,
                            Price = 11.5,
                            Title = "Dodge Caravan",
                            VehicleTypeId = "van"
                        },
                        new
                        {
                            VehicleId = 5,
                            Price = 10.99,
                            Title = "Eciipse",
                            VehicleTypeId = "car"
                        },
                        new
                        {
                            VehicleId = 6,
                            Price = 13.5,
                            Title = "Suzuki",
                            VehicleTypeId = "bike"
                        },
                        new
                        {
                            VehicleId = 7,
                            Price = 4.25,
                            Title = "Ninja",
                            VehicleTypeId = "bike"
                        },
                        new
                        {
                            VehicleId = 8,
                            Price = 16.25,
                            Title = "Crotter",
                            VehicleTypeId = "semi"
                        },
                        new
                        {
                            VehicleId = 9,
                            Price = 15.0,
                            Title = "Chevy",
                            VehicleTypeId = "van"
                        },
                        new
                        {
                            VehicleId = 10,
                            Price = 12.5,
                            Title = "Ninja x2",
                            VehicleTypeId = "bike"
                        },
                        new
                        {
                            VehicleId = 11,
                            Price = 8.75,
                            Title = "Dunebug",
                            VehicleTypeId = "semi"
                        },
                        new
                        {
                            VehicleId = 12,
                            Price = 9.0,
                            Title = "Jeep",
                            VehicleTypeId = "car"
                        },
                        new
                        {
                            VehicleId = 13,
                            Price = 6.5,
                            Title = "Patriot",
                            VehicleTypeId = "semi"
                        },
                        new
                        {
                            VehicleId = 14,
                            Price = 10.25,
                            Title = "Lincoln",
                            VehicleTypeId = "car"
                        },
                        new
                        {
                            VehicleId = 15,
                            Price = 15.5,
                            Title = "Security",
                            VehicleTypeId = "van"
                        },
                        new
                        {
                            VehicleId = 16,
                            Price = 14.5,
                            Title = "Harley",
                            VehicleTypeId = "bike"
                        },
                        new
                        {
                            VehicleId = 17,
                            Price = 6.75,
                            Title = "Toyota",
                            VehicleTypeId = "truck"
                        },
                        new
                        {
                            VehicleId = 18,
                            Price = 8.5,
                            Title = "Prius",
                            VehicleTypeId = "car"
                        },
                        new
                        {
                            VehicleId = 19,
                            Price = 10.99,
                            Title = "Red",
                            VehicleTypeId = "truck"
                        },
                        new
                        {
                            VehicleId = 20,
                            Price = 5.75,
                            Title = "Dodge Van",
                            VehicleTypeId = "van"
                        },
                        new
                        {
                            VehicleId = 21,
                            Price = 8.5,
                            Title = "Lexus G6",
                            VehicleTypeId = "truck"
                        },
                        new
                        {
                            VehicleId = 22,
                            Price = 12.5,
                            Title = "LongRoad",
                            VehicleTypeId = "semi"
                        },
                        new
                        {
                            VehicleId = 23,
                            Price = 10.99,
                            Title = "F-250",
                            VehicleTypeId = "truck"
                        },
                        new
                        {
                            VehicleId = 24,
                            Price = 13.75,
                            Title = "ShortRoad",
                            VehicleTypeId = "van"
                        },
                        new
                        {
                            VehicleId = 25,
                            Price = 13.5,
                            Title = "BigBike",
                            VehicleTypeId = "bike"
                        },
                        new
                        {
                            VehicleId = 26,
                            Price = 9.0,
                            Title = "Car Test",
                            VehicleTypeId = "car"
                        },
                        new
                        {
                            VehicleId = 27,
                            Price = 11.0,
                            Title = "Franklin",
                            VehicleTypeId = "bike"
                        },
                        new
                        {
                            VehicleId = 28,
                            Price = 8.75,
                            Title = "Jackson",
                            VehicleTypeId = "car"
                        },
                        new
                        {
                            VehicleId = 29,
                            Price = 9.75,
                            Title = "Buick",
                            VehicleTypeId = "car"
                        });
                });

            modelBuilder.Entity("VehicleProject.Models.VehicleEmployee", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("VehicleEmployees");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            EmployeeId = 18
                        },
                        new
                        {
                            VehicleId = 2,
                            EmployeeId = 20
                        },
                        new
                        {
                            VehicleId = 3,
                            EmployeeId = 7
                        },
                        new
                        {
                            VehicleId = 4,
                            EmployeeId = 2
                        },
                        new
                        {
                            VehicleId = 5,
                            EmployeeId = 19
                        },
                        new
                        {
                            VehicleId = 6,
                            EmployeeId = 8
                        },
                        new
                        {
                            VehicleId = 7,
                            EmployeeId = 12
                        },
                        new
                        {
                            VehicleId = 8,
                            EmployeeId = 16
                        },
                        new
                        {
                            VehicleId = 9,
                            EmployeeId = 2
                        },
                        new
                        {
                            VehicleId = 10,
                            EmployeeId = 20
                        },
                        new
                        {
                            VehicleId = 11,
                            EmployeeId = 15
                        },
                        new
                        {
                            VehicleId = 12,
                            EmployeeId = 4
                        },
                        new
                        {
                            VehicleId = 13,
                            EmployeeId = 21
                        },
                        new
                        {
                            VehicleId = 14,
                            EmployeeId = 5
                        },
                        new
                        {
                            VehicleId = 15,
                            EmployeeId = 9
                        },
                        new
                        {
                            VehicleId = 16,
                            EmployeeId = 13
                        },
                        new
                        {
                            VehicleId = 17,
                            EmployeeId = 7
                        },
                        new
                        {
                            VehicleId = 18,
                            EmployeeId = 4
                        },
                        new
                        {
                            VehicleId = 19,
                            EmployeeId = 11
                        },
                        new
                        {
                            VehicleId = 20,
                            EmployeeId = 22
                        },
                        new
                        {
                            VehicleId = 21,
                            EmployeeId = 17
                        },
                        new
                        {
                            VehicleId = 22,
                            EmployeeId = 3
                        },
                        new
                        {
                            VehicleId = 23,
                            EmployeeId = 14
                        },
                        new
                        {
                            VehicleId = 24,
                            EmployeeId = 1
                        },
                        new
                        {
                            VehicleId = 25,
                            EmployeeId = 10
                        },
                        new
                        {
                            VehicleId = 26,
                            EmployeeId = 6
                        },
                        new
                        {
                            VehicleId = 27,
                            EmployeeId = 23
                        },
                        new
                        {
                            VehicleId = 28,
                            EmployeeId = 4
                        },
                        new
                        {
                            VehicleId = 28,
                            EmployeeId = 26
                        },
                        new
                        {
                            VehicleId = 29,
                            EmployeeId = 25
                        });
                });

            modelBuilder.Entity("VehicleProject.Models.VehicleType", b =>
                {
                    b.Property<string>("VehicleTypeId")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            VehicleTypeId = "car",
                            Name = "Car"
                        },
                        new
                        {
                            VehicleTypeId = "truck",
                            Name = "Truck"
                        },
                        new
                        {
                            VehicleTypeId = "semi",
                            Name = "Semi"
                        },
                        new
                        {
                            VehicleTypeId = "van",
                            Name = "Van"
                        },
                        new
                        {
                            VehicleTypeId = "bike",
                            Name = "Bike"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VehicleProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VehicleProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VehicleProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleProject.Models.Vehicle", b =>
                {
                    b.HasOne("VehicleProject.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleProject.Models.VehicleEmployee", b =>
                {
                    b.HasOne("VehicleProject.Models.Employee", "Employee")
                        .WithMany("VehicleEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleProject.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleEmployees")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
